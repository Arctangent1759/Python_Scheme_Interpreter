(define (tree d n a)
	(if (= n 1)
		(begin
			(fd d)
			(penup)
			(fd (- d))
			(pendown)
		)
		(begin
			(fd d)
			(rt (- a))
			(tree (/ d 1.61803398875) (- n 1) a)
			(rt (* a 2))
			(tree (/ d 1.61803398875) (- n 1) a)
			(penup)
			(rt (- a))
			(fd (- d))
			(pendown)
		)
	)
)

(define (fib n)
	(define (helpy prev curr n)
		(if (= n 1)
			curr
			(helpy curr (+ prev curr) (- n 1))
		)
	)
	(helpy 0 1 n)
)

(define (random lbound upbound seed)
	(+ lbound (remainder (* (fib seed) seed seed) (- upbound lbound)))
)

(define (forest ntrees d n a seed)
	(if (= ntrees 0)
		'done
		(begin
			(define voffset (random -20 20 seed))  
			(tree  (random 20 d seed) n (random 20 a seed))
			(rt 90)
			(rt voffset)
			(fd (/ d 1.62))
			(rt (- voffset))
			(rt -90)
			(forest (- ntrees 1) d n a (+ seed (random 1 seed seed)))
		)
	)
)
(define (repeat k fn)
	(if (> k 0)
		(begin (fn) (repeat (- k 1) fn))
		'done
	)
)
(define (inverse-appolonian-gasket r n)
	(if (= n 1)
		(circle r)
		(begin
			(repeat 3 
				(lambda ()
					
					(circle r 120)
					(inverse-appolonian-gasket (/ r 2.15470053838) (- n 1))
					
				)
			)
		)
	)
)
(speed 0)
(penup)
(rt -90)
(fd 400)
(rt -90)
(fd 250)
(rt 90)
(pendown)
(fd -150)
(rt 90)
(forest 9 100 7 45 10)
(rt 90)
(fd 100)
(penup)
(fd -150)
(rt -90)
(fd 360)
(pendown)
(inverse-appolonian-gasket 35 5)
(inverse-appolonian-gasket -35 5)
(circle 35 60)
(inverse-appolonian-gasket -35 5)
(ht)
(exitonclick)
